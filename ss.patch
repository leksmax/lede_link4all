--- /home/david64/mnt/trunk_op/build_dir/target-mipsel_24kc_musl/root-ramips/etc/init.d/shadowsocks-libev	2018-03-13 04:29:24.000000000 +0800
+++ /home/david64/mnt/trunk_op/package/feeds/shadowsocks_libev_nocrypt/shadowsocks-libev-nocrypto/files/shadowsocks-libev.init	2018-03-13 18:22:33.970919776 +0800
@@ -1,6 +1,8 @@
 #!/bin/sh /etc/rc.common
 #
 # Copyright (C) 2017 Yousong Zhou <yszhou4tech@gmail.com>
+# Modified it for Shadowsocks-libev with optional crypto:
+# Ferenc Fejes <primalgamer@gmail.com>
 #
 # This is free software, licensed under the GNU General Public License v3.
 # See /LICENSE for more information.
@@ -28,7 +30,9 @@
 	local func
 
 	for func in "$@"; do
-		"$func" || return 1
+		if ! "$func"; then
+			return 1
+		fi
 	done
 }
 
@@ -59,10 +63,12 @@
 	[ "$ipv6_first" = 0 ] && ipv6_first=false || ipv6_first=true
 	[ "$fast_open" = 0 ] && fast_open=false || fast_open=true
 	[ "$reuse_port" = 0 ] && reuse_port=false || reuse_port=true
+	[ "$mptcp" = 0 ] && mptcp=false || mptcp=true
 	cat <<-EOF
 		"use_syslog": true,
 		"ipv6_first": $ipv6_first,
 		"fast_open": $fast_open,
+		"mptcp": $mptcp,
 		"reuse_port": $reuse_port,
 		${local_address:+${q}local_address${q}: ${q}$local_address${q},}
 		${local_port:+${q}local_port${q}: $local_port,}
@@ -78,7 +84,11 @@
 }
 
 ss_mkjson_ss_redir_conf() {
-	ss_mkjson_server_conf
+	ss_mkjson_server_conf || return 1
+	[ "$disable_sni" = 0 ] && disable_sni=false || disable_sni=true
+	cat <<-EOF
+		${q}disable_sni${q}: $disable_sni,
+	EOF
 }
 
 ss_mkjson_ss_server_conf() {
@@ -101,7 +111,7 @@
 
 	[ -x "$bin" ] || return
 	eval "$("validate_${cfgtype}_section" "$cfg" ss_validate_mklocal)"
-	"validate_${cfgtype}_section" "$cfg" || return 1
+	"validate_${cfgtype}_section" "$cfg"
 	[ "$disabled" = 0 ] || return
 
 	if ss_mkjson \
@@ -111,27 +121,31 @@
 		procd_open_instance "$cfgtype.$cfg"
 		procd_set_param command "$bin" -c "$confjson"
 		[ "$verbose" = 0 ] || procd_append_param command -v
-		[ "$no_delay" = 0 ] || procd_append_param command --no-delay
 		[ -z "$bind_address" ] || procd_append_param command -b "$bind_address"
+		[ -z "$manager_address" ] || procd_append_param command --manager-address "$manager_address"
 		procd_set_param file "$confjson"
 		procd_set_param respawn
 		procd_close_instance
-		ss_rules_cb
+		ss_rules_cb "$cfg"
 	fi
 }
 
 ss_rules_cb() {
-	local cfgserver server
+	local cfgserver
+	local server
+
+	[ "$cfgtype" != ss_server ] || return
+	config_get cfgserver "$cfg" server
+	config_get server "$cfgserver" server
 
+	ss_rules_servers="$ss_rules_servers $server"
 	if [ "$cfgtype" = ss_redir ]; then
-		config_get cfgserver "$cfg" server
-		config_get server "$cfgserver" server
-		ss_redir_servers="$ss_redir_servers $server"
 		if [ "$mode" = tcp_only -o "$mode" = "tcp_and_udp" ]; then
 			eval "ss_rules_redir_tcp_$cfg=$local_port"
 		fi
 		if [ "$mode" = udp_only -o "$mode" = "tcp_and_udp" ]; then
 			eval "ss_rules_redir_udp_$cfg=$local_port"
+			eval "ss_rules_redir_server_udp_$cfg=$server"
 		fi
 	fi
 }
@@ -140,45 +154,53 @@
 	local cfg="ss_rules"
 	local bin="$ss_bindir/ss-rules"
 	local cfgtype
-	local local_port_tcp local_port_udp
-	local args
+	local args local_port_tcp local_port_udp server_udp
+	local i a_args d_args
 
 	[ -x "$bin" ] || return 1
 	config_get cfgtype "$cfg" TYPE
 	[ "$cfgtype" = ss_rules ] || return 1
 
 	eval "$(validate_ss_rules_section "$cfg" ss_validate_mklocal)"
-	validate_ss_rules_section "$cfg" || return 1
+	validate_ss_rules_section "$cfg"
 	[ "$disabled" = 0 ] || return 1
 
 	eval local_port_tcp="\$ss_rules_redir_tcp_$redir_tcp"
 	eval local_port_udp="\$ss_rules_redir_udp_$redir_udp"
-	[ -n "$local_port_tcp" -o -n "$local_port_udp" ] || return 1
-	ss_redir_servers="$(echo "$ss_redir_servers" | tr ' ' '\n' | sort -u)"
-	[ "$dst_forward_recentrst" = 0 ] || args="$args --dst-forward-recentrst"
+	eval server_udp="\$ss_rules_redir_server_udp_$redir_udp"
+	[ -z "$local_port_udp" ] || args="$args -U"
+	case "$local_default" in
+		forward) args="$args -O" ;;
+		checkdst) args="$args -o" ;;
+	esac
+	case "$src_default" in
+		bypass) d_args=RETURN ;;
+		forward) d_args=SS_SPEC_WAN_FW ;;
+		checkdst) d_args=SS_SPEC_WAN_AC ;;
+	esac
+	ss_rules_servers="$(echo "$ss_rules_servers" | tr ' ' '\n' | sort -u)"
+	for i in $src_ips_bypass; do a_args="b,$i $a_args"; done
+	for i in $src_ips_forward; do a_args="g,$i $a_args"; done
+	for i in $src_ips_checkdst; do a_args="n,$i $a_args"; done
 
 	"$bin" \
-			-s "$ss_redir_servers" \
+			-s "$ss_rules_servers" \
 			-l "$local_port_tcp" \
+			-S "$server_udp" \
 			-L "$local_port_udp" \
-			--src-default "$src_default" \
-			--dst-default "$dst_default" \
-			--local-default "$local_default" \
-			--dst-bypass-file "$dst_ips_bypass_file" \
-			--dst-forward-file "$dst_ips_forward_file" \
-			--dst-bypass "$dst_ips_bypass" \
-			--dst-forward "$dst_ips_forward" \
-			--src-bypass "$src_ips_bypass" \
-			--src-forward "$src_ips_forward" \
-			--src-checkdst "$src_ips_checkdst" \
-			--ifnames "$ifnames" \
-			--ipt-extra "$ipt_args" \
+			-B "$dst_ips_bypass_file" \
+			-W "$dst_ips_forward_file" \
+			-b "$dst_ips_bypass" \
+			-w "$dst_ips_forward" \
+			-e "$ipt_args" \
+			-a "$a_args" \
+			-d "$d_args" \
 			$args \
 		|| "$bin" -f
 }
 
 start_service() {
-	local cfgtype
+	local cfgtype="$1"
 
 	mkdir -p "$ss_confdir"
 	config_load shadowsocks-libev
@@ -226,8 +248,8 @@
 	local cfgtype="$1"; shift
 	local cfg="$1"; shift
 	local func="$1"; shift
-	local stream_methods='"none","table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
-	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm", "chacha20-ietf-poly1305", "xchacha20-ietf-poly1305"'
+	local stream_methods='"none", "table", "rc4", "rc4-md5", "aes-128-cfb", "aes-192-cfb", "aes-256-cfb", "aes-128-ctr", "aes-192-ctr", "aes-256-ctr", "bf-cfb", "camellia-128-cfb", "camellia-192-cfb", "camellia-256-cfb", "salsa20", "chacha20", "chacha20-ietf"'
+	local aead_methods='"aes-128-gcm", "aes-192-gcm", "aes-256-gcm"'
 
 	"${func:-ss_validate}" "$cfgtype" "$cfg" "$@" \
 		'disabled:bool:0' \
@@ -254,25 +276,27 @@
 		'disabled:bool:0' \
 		'fast_open:bool:0' \
 		'ipv6_first:bool:0' \
-		'no_delay:bool:0' \
 		'reuse_port:bool:0' \
+		'mptcp:bool:0' \
 		'verbose:bool:0' \
-		'mode:or("tcp_only", "udp_only", "tcp_and_udp"):tcp_only' \
+		'mode:or("tcp_only", "udp_only", "tcp_and_udp")' \
 		'mtu:uinteger' \
 		'timeout:uinteger' \
 		'user:string'
 }
 
 validate_server_section() {
-	validate_common_server_options_ server "$1" "$2"
+	validate_common_server_options_ server "$1" "${2}"
 }
 
 validate_ss_local_section() {
-	validate_common_client_options_ ss_local "$1" "$2"
+	validate_common_client_options_ ss_local "$1" "${2}"
 }
 
 validate_ss_redir_section() {
-	validate_common_client_options_ ss_redir "$1" "$2"
+	validate_common_client_options_ ss_redir "$1" \
+		"${2}" \
+		'disable_sni:bool:0'
 }
 
 validate_ss_rules_section() {
@@ -280,30 +304,28 @@
 		'disabled:bool:0' \
 		'redir_tcp:uci("shadowsocks-libev", "@ss_redir")' \
 		'redir_udp:uci("shadowsocks-libev", "@ss_redir")' \
-		'src_ips_bypass:or(ip4addr,cidr4)' \
-		'src_ips_forward:or(ip4addr,cidr4)' \
-		'src_ips_checkdst:or(ip4addr,cidr4)' \
+		'src_ips_bypass:list(ipaddr)' \
+		'src_ips_forward:list(ipaddr)' \
+		'src_ips_checkdst:list(ipaddr)' \
 		'dst_ips_bypass_file:file' \
-		'dst_ips_bypass:or(ip4addr,cidr4)' \
+		'dst_ips_bypass:list(ipaddr)' \
 		'dst_ips_forward_file:file' \
-		'dst_ips_forward:or(ip4addr,cidr4)' \
-		'src_default:or("bypass", "forward", "checkdst"):checkdst' \
-		'dst_default:or("bypass", "forward"):bypass' \
-		'local_default:or("bypass", "forward", "checkdst"):bypass' \
-		'dst_forward_recentrst:bool:0' \
-		'ifnames:maxlength(15)' \
+		'dst_ips_forward:list(ipaddr)' \
+		'src_default:or("bypass", "forward", "checkdst")' \
+		'local_default:or("bypass", "forward", "checkdst")' \
 		'ipt_args:string'
 }
 
 validate_ss_server_section() {
 	validate_common_server_options_ ss_server "$1" \
 		validate_common_options_ \
-		"$2" \
-		'bind_address:ipaddr'
+		"${2}" \
+		'bind_address:ipaddr' \
+		'manager_address:host'
 }
 
 validate_ss_tunnel_section() {
 	validate_common_client_options_ ss_tunnel "$1" \
-		"$2" \
+		"${2}" \
 		'tunnel_address:regex(".+\:[0-9]+")'
 }
